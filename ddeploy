#!/usr/bin/env bash

# A tool for deploying an application to a remote host in a Docker
# container, according to a configuration provided in a `ddeployrc` file
# (optionally prefixed with a dot `.`). See README.md for details.
#
# Options:
#
# -r - Ref to check out and deploy, `master` by default.
# -q - Quit without attempting to log into the deploy host. This is a guard
#      flag for internal use against looping indefinitely.

function msg {
    echo "==> $@" >&2
}

function err {
    echo "Error: $@" >&2
    exit 1
}

function parse_options {
    REF=master
    
    while getopts "lr:q" OPT; do
        case $OPT in
            r ) REF=$OPTARG  ;;
            q ) QUIT=1 ;;
        esac
    done    
}

function get_rcfile {
    for RCFILE in ddeployrc .ddeployrc; do
        if [[ -f $RCFILE && -r $RCFILE ]]; then
            echo $RCFILE
            break
        fi
    done
}

function source_rcfile {
    [[ -z "$1" ]] && err "ddeployrc or .ddeployrc not found or not readable"
    source "$1"
}

function validate_settings {
    local REQUIRED=(
        DEPLOY_HOST
        DEPLOY_DIR
        IMAGE_NAME
        CONTAINER_NAME
    )
    
    for i in ${REQUIRED[@]}; do
        [[ -z "${!i}" ]] && err "$i is required, but not set in .ddeployrc or ddeployrc"
    done
}

DEPLOY_FILES_DIR=".ddeploy"
RCFILE=$(get_rcfile)

parse_options $@
source_rcfile "$RCFILE"
validate_settings

if [[ $(hostname) != "$DEPLOY_HOST" ]]; then

    # Local host
    
    DEPLOY_FILES="$0 Dockerfile $RCFILE $CONTAINER_RUNNER"
    SELF_BASENAME=$(basename $0)

    [[ -n "$QUIT" ]] && {
        echo "-q[uit] passed, but not on $DEPLOY_HOST: exiting" >&2
        exit 1
    }

    msg "Copying deployment scripts to $DEPLOY_HOST"
    rsync -aP $DEPLOY_FILES $DEPLOY_HOST:$DEPLOY_DIR/$DEPLOY_FILES_DIR || exit 1
    
    msg "Logging in to deploy host"
    ssh -A $DEPLOY_HOST -- bash -c \
        "\"cd $DEPLOY_DIR/$DEPLOY_FILES_DIR && ./$SELF_BASENAME -q $*\"" \
        ||  exit 1
else

    # Deploy host

    CONTAINER_DIR=${CONTAINER_DIR:-/opt/$CONTAINER_NAME}
    CONTAINER_PORT_CONF=${CONTAINER_PORT_MAP:+\
        -p 127.0.0.1:$CONTAINER_PORT_MAP}
    CONTAINER_RUNNER_ABS=${CONTAINER_RUNNER:+\
        $CONTAINER_DIR/$DEPLOY_FILES_DIR/$CONTAINER_RUNNER}
    
    msg "Fetching and checking out $REF"
    pushd $DEPLOY_DIR > /dev/null || exit 1
    git fetch && git checkout $REF && git merge || exit 1
    popd > /dev/null
    
    msg "Building container"
    sudo docker build --build-arg=INSTALL_DIR="$CONTAINER_DIR" \
        -t $IMAGE_NAME . || exit 1

    msg "Stopping / removing $CONTAINER_NAME" >&2
    sudo docker stop $CONTAINER_NAME && sudo docker rm $CONTAINER_NAME

    msg "Starting container" >&2
    sudo docker run --restart unless-stopped --name=$CONTAINER_NAME \
        $CONTAINER_PORT_CONF -dt -v $DEPLOY_DIR:$CONTAINER_DIR \
        --log-driver json-file --log-opt max-size=100m $IMAGE_NAME \
        $CONTAINER_RUNNER_ABS "$CONTAINER_DIR"
        
    exit $?
fi

