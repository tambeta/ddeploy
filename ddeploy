#!/usr/bin/env bash

# A tool for deploying an application to a remote host in Docker
# containers, according to the configuration provided in a `docker-
# compose.yml` file. See README.md for details.
#
# Options:
#
# -f - Foreground mode: do not pass `--detach` to `docker-compose up`.
# -d - Service deploy directory, passed automatically if invoked on the
#      deploy host. For internal use, do not pass by hand.
# -r - Ref to check out and deploy, passed automatically if invoked on the
#      deploy host. For internal use, do not pass by hand.

function msg {
    echo "==> $@" >&2
}

function err {
    echo "Error: $@" >&2
    exit 1
}

function parse_options {
    DETACH="-d"
    
    while getopts "fd:r:" OPT; do
        case $OPT in
            f ) unset DETACH  ;;
            d ) DEPLOY_DIR=$OPTARG ;;
            r ) REF=$OPTARG ;;
        esac
    done    
}

function get_services {
    yq '."x-service-conf".services | keys' < "$COMPOSEFILE" | egrep '"\w+"' | cut -f2 -d\"
}

function get_service_field {
    SERVICE="$1"
    FIELD="$2"
    
    yq -r ".\"x-service-conf\".services.${SERVICE}.${FIELD}" < "$COMPOSEFILE"
}

COMPOSEFILE="docker-compose.yml"
parse_options $@

if [[ -z "$DEPLOY_DIR" ]]; then

    # Local host
    
    [[ -r "$COMPOSEFILE" ]] || \
        err "$COMPOSEFILE not found or not readable"
    which yq &> /dev/null || \
        err "yq not found, but a dependency of $SELF_BASENAME"
    
    ENVFILE=".env"
    SELF_BASENAME=$(basename $0)
    DEPLOY_HOST=$(yq -r '."x-service-conf".deploy_host' < "$COMPOSEFILE")
    DEPLOY_WORKDIR=$(yq -r '."x-service-conf".deploy_workdir' < "$COMPOSEFILE")
    DEPLOY_FILES="$0 $ENVFILE $COMPOSEFILE"

    [[ -z "$DEPLOY_HOST" ]] && \
        err "Deploy host name not configured in $COMPOSEFILE"
    [[ -z "$DEPLOY_WORKDIR" ]] && \
        err "Deployment working directory name not configured in $COMPOSEFILE"
    
    # Copy deploy infrastructure files to the deploy host
    
    msg "Copying deployment scripts to $DEPLOY_HOST"
    ssh $DEPLOY_HOST "mkdir -p $DEPLOY_WORKDIR" || exit 1
    rsync -aLP $DEPLOY_FILES $DEPLOY_HOST:$DEPLOY_WORKDIR || exit 1
    
    # For each service, fetch and check out the configured ref on the
    # deploy host
    
    for SERVICE in $(get_services); do        
        SVC_DEPLOY_DIR=$(get_service_field $SERVICE deploy_dir)
        SVC_REF=$(get_service_field $SERVICE ref)
        
        if [[ -z "$SVC_REF" ]]; then
            msg "No ref provided for $SERVICE, skipping checkout"
            continue
        fi
        
        msg "Fetching and checking out $SVC_REF on $DEPLOY_HOST"
        ssh -A $DEPLOY_HOST \
            "cd $DEPLOY_WORKDIR && ./$SELF_BASENAME -d $SVC_DEPLOY_DIR -r $SVC_REF" \
            ||  exit 1
    done

    # Bring up the app on the deploy host
    
    msg "Running the app on $DEPLOY_HOST"
    ssh $DEPLOY_HOST "cd $DEPLOY_WORKDIR && sudo -E docker-compose up --build"
else

    # Assume we're on the deploy host: fetch and check out the passed ref
    # for a service

    [[ -z "$REF" ]] && err \
        '`-d` also requires a ref to be passed via `-r`'

    cd "$DEPLOY_DIR" && git fetch && git checkout $REF || exit 1
    TRACKING_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)
    
    if [[ -n "$TRACKING_BRANCH" ]]; then
        git merge "$TRACKING_BRANCH" || exit 1
    fi
        
    exit $?
fi
